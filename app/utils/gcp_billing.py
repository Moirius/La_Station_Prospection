import os
import logging
from google.cloud import bigquery
from app.utils.logger import SystemLogger

def get_gcp_monthly_cost(project_id, table_id, credentials_path):
    """R√©cup√©rer le co√ªt mensuel Google Cloud Platform"""
    try:
        SystemLogger.info(f"üí∞ [GCP BILLING] D√©but de la r√©cup√©ration du co√ªt mensuel")
        SystemLogger.info(f"üí∞ [GCP BILLING] Project ID: {project_id}")
        SystemLogger.info(f"üí∞ [GCP BILLING] Table ID: {table_id}")
        SystemLogger.info(f"üí∞ [GCP BILLING] Credentials path: {credentials_path}")
        
        # V√©rifier si le fichier de credentials existe
        if not os.path.exists(credentials_path):
            SystemLogger.error(f"‚ùå [GCP BILLING] Fichier de credentials non trouv√©: {credentials_path}")
            raise FileNotFoundError(f"Fichier de credentials non trouv√©: {credentials_path}")
        
        SystemLogger.info(f"‚úÖ [GCP BILLING] Fichier de credentials trouv√©")
        
        # Configurer les credentials
        os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = credentials_path
        SystemLogger.info(f"‚úÖ [GCP BILLING] Credentials configur√©s")
        
        # Cr√©er le client BigQuery
        client = bigquery.Client(project=project_id)
        SystemLogger.info(f"‚úÖ [GCP BILLING] Client BigQuery cr√©√©")
        
        # Construire la requ√™te
        query = f'''
        SELECT
          SUM(cost) as total_cost
        FROM
          `{table_id}`
        WHERE
          EXTRACT(YEAR FROM usage_start_time) = EXTRACT(YEAR FROM CURRENT_DATE())
          AND EXTRACT(MONTH FROM usage_start_time) = EXTRACT(MONTH FROM CURRENT_DATE())
          AND project.id = '{project_id}'
        '''
        
        SystemLogger.info(f"üîç [GCP BILLING] Ex√©cution de la requ√™te BigQuery")
        SystemLogger.info(f"üîç [GCP BILLING] Query: {query}")
        
        # Ex√©cuter la requ√™te
        results = client.query(query).result()
        SystemLogger.info(f"‚úÖ [GCP BILLING] Requ√™te ex√©cut√©e avec succ√®s")
        
        # R√©cup√©rer le r√©sultat
        row = next(results)
        cost = float(row.total_cost) if row.total_cost else 0.0
        
        SystemLogger.info(f"üí∞ [GCP BILLING] Co√ªt mensuel r√©cup√©r√©: {cost:.2f} ‚Ç¨")
        return cost
        
    except FileNotFoundError as e:
        SystemLogger.error(f"‚ùå [GCP BILLING] Erreur fichier credentials: {str(e)}")
        raise
    except Exception as e:
        SystemLogger.error(f"‚ùå [GCP BILLING] Erreur lors de la r√©cup√©ration du co√ªt: {str(e)}")
        SystemLogger.error(f"‚ùå [GCP BILLING] Type d'erreur: {type(e).__name__}")
        raise 